name: CI/CD

on:
  release:
    types:
      - published
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  merge_group:
    types:
      - checks_requested
  pull_request:
    branches:
      - 'main'
      - 'v*'

env:
  ROS_DISTRO: humble
  CC: clang
  CXX: clang++
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }} # for nektos/act, use your own username via --actor option

jobs:
  build-dev-image:
    name: Development image
    timeout-minutes: 35
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
          - runner: ubuntu-24.04
            platform: linux/amd64
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Development docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ${{ env.REGISTRY }}/dr-qp/ros-desktop
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - uses: actions/checkout@v4 # Checkout the repository to allow work with nektos/act on non pushed commits
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: scripts
          file: scripts/ros-desktop.dockerfile
          push: ${{ env.ACT == '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ env.ACT != '' && 'type=registry,ref=${{ env.REGISTRY }}/dr-qp/ros-desktop-cache' || 'type=gha' }}
          cache-to: ${{ env.ACT != '' && 'type=registry,ref=${{ env.REGISTRY }}/dr-qp/ros-desktop-cache' || 'type=gha,mode=max' }}
          platforms: ${{ matrix.platform }}

  ros-ci:
    name: Build and test ROS2 workspace
    timeout-minutes: 35
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
          - runner: ubuntu-24.04
            platform: linux/amd64
    runs-on: ${{ matrix.runner }}
    needs: [build-dev-image]
    container:
      image: ${{ needs.build-dev-image.outputs.image }}
      options: --user rosdev # Mandatory! Sets user:group matching the one of the runner, allowing access to mounted paths

      # Only needed for nektos/act runs
      # credentials:
      #   username: ${{ env.REGISTRY_USERNAME }}
      #   password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: ros-tooling/action-ros-ci@v0.3
        id: action_ros_ci_step
        env:
          GCOV_COMMAND: "${{ github.workspace }}/scripts/gcov"
        with:
          target-ros2-distro: ${{ env.ROS_DISTRO }}
          colcon-defaults: |
            {
              "build": {
                "mixin": ["coverage-gcc", "coverage-pytest"]
              },
              "test": {
                "mixin": ["coverage-pytest"]
              }
            }


      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        if: !env.ACT
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ros_ws/lcov/total_coverage.info,ros_ws/coveragepy/.coverage
          disable_search: true
          flags: unittests-${{ matrix.platform }}
          name: codecov-umbrella

      - uses: actions/upload-artifact@v4
        # upload the logs even when the build fails
        if: env.ACT == '' && always()
        with:
          name: colcon-logs-${{ matrix.platform }}
          path: ${{ steps.action_ros_ci_step.outputs.ros-workspace-directory-name }}/log

  dev-container-ci:
      name: Devcontainer image
      timeout-minutes: 35
      strategy:
        fail-fast: false
        matrix:
          include:
            - runner: ubuntu-24.04-arm
              platform: linux/arm64
            - runner: ubuntu-24.04
              platform: linux/amd64
      runs-on: ${{ matrix.runner }}
      steps:
          # Running container will fail with act due to no Docker in Docker, only Docker outside of Docker
          # https://github.com/Dr-QP/Dr.QP/wiki/Issue-using-%60act%60-and-%60devcontainers-ci%60
          # DinD requires an image that has dockerd installed, so run with -P ubuntu-latest=ghcr.io/corvina-r-d/ubuntu:act-22.04
          # DinD requires --priviliged option as well
        - name: optionally start DinD for act (local testing)
          if: env.ACT
          run: |
            dockerd -H unix:///var/run/dind.sock & sleep 5;
            echo "DOCKER_HOST=unix:///var/run/dind.sock" >>${GITHUB_ENV}

        - name: optionally test DinD for act (local testing)
          if: env.ACT
          run: |
            docker run --rm hello-world:linux

        - uses: actions/checkout@v4
        - uses: docker/setup-buildx-action@v3
        - uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ env.REGISTRY_USERNAME }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Generate metadata tags for devcontainer image
          # do not use name for dev container as devcontainer/cli can't handle name in tags
          id: meta
          uses: docker/metadata-action@v5
          with:
            tags: |
              type=ref,event=branch
              type=ref,event=pr
              type=semver,pattern={{version}}
              type=semver,pattern={{major}}.{{minor}}

        - name: Build and test dev container image
          uses: devcontainers/ci@v0.3
          with:
            platform: ${{ matrix.platform }}
            imageName: ${{ env.REGISTRY }}/dr-qp/humble-ros-devcontainer
            cacheFrom: ${{ env.REGISTRY }}/dr-qp/humble-ros-devcontainer
            push: ${{ env.ACT != null && 'false' || 'always' }} # always == only if runCmd succeeds
            configFile: .devcontainer/source/devcontainer.json
            imageTag: ${{ steps.meta.outputs.tags }}
            runCmd: |
              sudo apt update
              rosdep update
              ./scripts/ros/ros-dep.sh
              colcon build
              colcon test

  build-deploy-image:
    name: Deployment image
    timeout-minutes: 35
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
          - runner: ubuntu-24.04
            platform: linux/amd64
    runs-on: ${{ matrix.runner }}
    needs: [build-dev-image, ros-ci, dev-container-ci]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Deployment docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ${{ env.REGISTRY }}/dr-qp/ros-deploy
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - uses: actions/checkout@v4 # Checkout the repository to allow work with nektos/act on non pushed commits
      - name: Build and push Deployment image
        uses: docker/build-push-action@v6
        with:
          context: scripts/deploy
          file: scripts/deploy/ros-deploy.dockerfile
          push: ${{ env.ACT == '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          cache-from: ${{ env.ACT != '' && 'type=registry,ref=${{ env.REGISTRY }}/dr-qp/ros-deploy-cache' || 'type=gha' }}
          cache-to: ${{ env.ACT != '' && 'type=registry,ref=${{ env.REGISTRY }}/dr-qp/ros-deploy-cache' || 'type=gha,mode=max' }}
          build-args: |
            ROS_DISTRO=${{ env.ROS_DISTRO }}
            GIT_SHA=${{ github.event.pull_request && github.event.pull_request.head.sha || github.sha }}
            BUILD_IMAGE=${{ needs.build-dev-image.outputs.image }}
