name: Devcontainer CI

on:
  release:
    types:
      - published
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main
      - v*
  merge_group:
    types:
      - checks_requested

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  ROS_DISTRO: jazzy
  CC: clang
  CXX: clang++
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }} # for nektos/act, use your own username via --actor option

jobs:
  paths-filter:
    name: Paths filter
    runs-on: ${{ vars.AMD_ONLY == '1' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    outputs:
      pass: ${{ steps.filter.outputs.pass }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Filters
        uses: ./.github/actions/paths-filter
        id: filter
        with:
          extra-filter: .github/workflows/devcontainer.yml

  dev-container-ci:
      name: Devcontainer image
      timeout-minutes: 35
      needs: paths-filter
      if: needs.paths-filter.outputs.pass == 'true'
      strategy:
        fail-fast: false
        matrix:
          include:
            - arch: ${{ vars.AMD_ONLY == '1' && 'amd64' || 'arm64' }}
            - arch: ${{ vars.ARM_ONLY == '1' && 'arm64' || 'amd64' }}
      runs-on: ${{ matrix.arch == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
      permissions:
        packages: write
      steps:
          # Running container will fail with act due to no Docker in Docker, only Docker outside of Docker
          # https://github.com/Dr-QP/Dr.QP/wiki/Issue-using-%60act%60-and-%60devcontainers-ci%60
          # DinD requires an image that has dockerd installed, so run with -P ubuntu-latest=ghcr.io/corvina-r-d/ubuntu:act-22.04
          # DinD requires --priviliged option as well
          #
          #
          # DinD fails under QEMU emulation of arm64 on the amd64 CPUs:
          # iptables: Failed to initialize nft: Protocol not supported
          # https://github.com/multiarch/qemu-user-static/issues/191
        - name: optionally start DinD for act (local testing)
          if: env.ACT
          run: |
            dockerd -H unix:///var/run/dind.sock & sleep 5;
            echo "DOCKER_HOST=unix:///var/run/dind.sock" >>${GITHUB_ENV}

        - name: optionally test DinD for act (local testing)
          if: env.ACT
          run: |
            docker run --rm ghcr.io/dr-qp/hello-world:linux
            id

        - name: Install updated Skopeo needed for docker/buildx
          run: |
            sudo apt-get update
            sudo apt-get install skopeo -y


        - uses: actions/checkout@v4
        - uses: docker/setup-buildx-action@v3
        - uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ env.REGISTRY_USERNAME }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Generate metadata tags for devcontainer image
          id: meta
          uses: ./.github/actions/docker/metadata-action
          with:
            arch: ${{ matrix.arch }}

        - name: Build and test dev container image
          uses: devcontainers/ci@v0.3
          env:
            CACHE_IMAGE: ${{ env.REGISTRY }}/dr-qp/cache-${{ env.ROS_DISTRO }}-ros-devcontainer:${{ matrix.arch }}
          with:
            configFile: .devcontainer/source/devcontainer.json
            cacheFrom: ${{ env.CACHE_IMAGE }}
            cacheTo: ${{ env.CACHE_IMAGE }}
            runCmd: |
              set -x
              set -e
              id
              time sudo apt update
              time rosdep update
              time ./scripts/ros/ros-dep.sh
              time colcon build --event-handlers=console_cohesion+
              time colcon test --event-handlers=console_cohesion+

  merge-all:
    name: Devcontainer CI finished
    needs: [dev-container-ci]
    runs-on: ${{ vars.AMD_ONLY == '1' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    permissions: {}
    if: ${{ success() || cancelled() || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'failure') }}
    steps:
      - name: All jobs succeeded!
        if: ${{ success() }}
        run: |
          exit 0
      - name: Some jobs have failed!
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          exit 1
      - name: Some jobs have cancelled!
        if: ${{ cancelled() || contains(needs.*.result, 'cancelled') }}
        run: |
          exit 1
