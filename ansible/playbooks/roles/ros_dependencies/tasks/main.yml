---
# ROS dependencies installation

# Always include the variables file (contains known ROS dependencies)
- name: Include known ROS dependencies
  ansible.builtin.include_vars:
    file: "{{ role_path }}/vars/known_ros_dependencies.yml"

- name: Set ros_packages variable for backward compatibility
  ansible.builtin.set_fact:
    ros_packages: "{{ ros_dependencies_known_packages }}"

- name: Update APT cache
  ansible.builtin.apt:
    update_cache: true

- name: Check policy for all ROS packages at once
  ansible.builtin.command:
    cmd: apt-cache policy --quiet=0 {{ ros_dependencies_known_packages | join(' ') }}
  register: pkg_policy
  changed_when: false
  failed_when: false

- name: Extract only the header names (i.e. found packages)
  ansible.builtin.set_fact:
    not_available_packages: >-
      {{ pkg_policy.stderr_lines
         | select('match', '^.*Unable to locate package.*$')
         | map('regex_replace', 'N: Unable to locate package ','')
         | list }}


- name: Debug
  ansible.builtin.debug:
    msg: "not_available_packages: {{ not_available_packages }}"

- name: Remove not available packages
  ansible.builtin.set_fact:
    available_packages_list: >-
      {{ ros_dependencies_known_packages
         | difference(not_available_packages) }}

- name: Available packages
  ansible.builtin.debug:
    msg: "{{ item }}"
  when: available_packages_list | default([]) | length > 0
  loop:
    - "{{ available_packages_list }}"

- name: Install available ROS packages
  ansible.builtin.apt:
    name: "{{ available_packages_list }}"
    state: present
    install_recommends: false
  when: available_packages_list | default([]) | length > 0
