---
# ROS dependencies installation

# Always include the variables file (contains known ROS dependencies)
- name: Include known ROS dependencies
  ansible.builtin.include_vars:
    file: "{{ role_path }}/vars/known_ros_dependencies.yml"

- name: Set ros_packages variable for backward compatibility
  ansible.builtin.set_fact:
    ros_packages: "{{ ros_dependencies_known_packages }}"

- name: Update APT cache
  ansible.builtin.apt:
    update_cache: true

- name: Check policy for all ROS packages at once
  ansible.builtin.command:
    cmd: apt-cache policy {{ ros_dependencies_known_packages | join(' ') }}
  register: pkg_policy
  changed_when: false
  failed_when: false

- name: Extract only the header names (i.e. found packages)
  ansible.builtin.set_fact:
    available_pkg_headers: >-
      {{ pkg_policy.stdout_lines
         | select('match', '^[^\\s].*:$')
         | map('regex_replace', ':$','')
         | list }}


- name: Debug
  ansible.builtin.debug:
    msg: "available_pkg_headers: {{ available_pkg_headers }}"

- name: Filter known_packages by what actually exists
  ansible.builtin.set_fact:
    available_packages_list: >-
      {{ ros_dependencies_known_packages
         | intersect(available_pkg_headers) }}

- name: Debug - the following packages are missing
  ansible.builtin.debug:
    msg: "Missing: {{ ros_dependencies_known_packages | difference(available_pkg_headers) | sort }}"

- name: Debug - will install only these
  ansible.builtin.debug:
    msg: "Installing: {{ available_packages_list }}"

- name: Install available ROS packages
  ansible.builtin.apt:
    name: "{{ available_packages_list }}"
    state: present
    install_recommends: false
  when: available_packages_list | default([]) | length > 0
