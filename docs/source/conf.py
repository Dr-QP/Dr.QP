# Configuration file for the Sphinx documentation builder.
import os

# -- Project information

project = 'Dr.QP'
copyright = '2017-2025 Anton Matosov'  # noqa
author = 'Anton Matosov'

release = '0.1'
version = '0.1.0'


# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# The master toctree document.
master_doc = 'index'

# The default role
default_role = 'any'

# The set of warnings to suppress.
suppress_warnings = ['image.nonlocal_uri']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['**/_*.rst', '**/_*.md', '**/*.ipynb']

# -- General configuration
extensions = [
    'sphinx.ext.duration',
    'sphinx.ext.doctest',
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.intersphinx',
    'sphinx_rtd_size',
    'myst_nb',  # for embedding jupyter notebooks
    'myst_parser',  # for embedding myst pages
]

# Javascript to be loaded on pages containing ipywidgets
nb_ipywidgets_js = {
    'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js': {
        'integrity': 'sha256-Ae2Vz/4ePdIu6ZyI/5ZGsYnb+m0JlOmKPjt6XZ9JJkA=',
        'crossorigin': 'anonymous',
    },
    'https://cdn.jsdelivr.net/npm/@jupyter-widgets/html-manager@1.0.6/dist/embed-amd.js': {
        'data-jupyter-widgets-cdn': 'https://cdn.jsdelivr.net/npm/',
        'crossorigin': 'anonymous',
    },
}
nb_execution_timeout = 300  # seconds

myst_enable_extensions = [
    'amsmath',
    'colon_fence',
    'deflist',
    'dollarmath',
    'html_image',
]
myst_url_schemes = ('http', 'https', 'mailto')


intersphinx_mapping = {
    'python': ('https://docs.python.org/3/', None),
    'sphinx': ('https://www.sphinx-doc.org/en/master/', None),
}
intersphinx_disabled_domains = ['std']

templates_path = ['_templates']

# -- Options for HTML output

html_theme = 'sphinx_rtd_theme'
html_theme_options = {
    'collapse_navigation': False,
    'sticky_navigation': True,
    'navigation_depth': -1,
}
# sphinx_rtd_size_width = '90%' # This makes reading much harder due to excessive width

github_user = 'dr-qp'
github_repo = 'Dr.QP'


def get_github_branch_from_pr(pr_number: int):
    from github import Github

    g = Github()
    return g.get_repo(github_user + '/' + github_repo).get_pull(pr_number).head.ref


def version_name():
    rtd_version_name = os.environ.get('READTHEDOCS_VERSION_NAME', 'main')
    rtd_version_type = os.environ.get('READTHEDOCS_VERSION_TYPE', '')
    rtd_git_sha = os.environ.get('READTHEDOCS_GIT_COMMIT_HASH', 'main')

    if rtd_version_type == 'tag' or rtd_version_type == 'branch':
        return rtd_version_name
    elif rtd_version_type == 'external':  # pull request
        pr_number = int(rtd_version_name)
        return get_github_branch_from_pr(pr_number) or rtd_git_sha

    return 'main'


html_context = {
    'display_github': True,
    'github_user': github_user,
    'github_repo': github_repo,
    'github_version': version_name(),
    'conf_py_path': '/docs/source/',
}

# -- Options for EPUB output
epub_show_urls = 'footnote'


# -- lightweight Sphinx extension
def setup(app):
    # Set default if not already defined in the shell
    os.environ.setdefault('SPHINX_BUILD', '1')
    return {}
